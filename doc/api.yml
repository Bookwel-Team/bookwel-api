openapi: 3.0.3
info:
  version: 'latest'
  title: Bookwel-api

servers:
  - url: 'http://13.39.144.179:3000'
security:
  - BearerAuth: [ ]

paths:
  '/chats':
    post:
      tags:
        - AI
      operationId: chat
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: Response from AI
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AiResponse"

  '/hello':
      get:
        security:
          [ ]
        tags:
          - HealthController
        operationId: checkHealth
        responses:
          200:
            description: Health controller
            content:
              text/plain:
                schema:
                  type: string
                  example: "Hello from the Bookwel Team!"
  '/whoami':
    get:
      tags:
        - Security
      description: tells you who you are
      operationId: whoami
      responses:
        "200":
          description: your identity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Whoami"
  '/categories':
    get:
      security:
        [ ]
      tags:
        - Category
      summary: Get all categories of book
      operationId: getAllCategories
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: All categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
        '404':
          $ref: "#/components/responses/404"
  '/recommended-books':
    get:
      tags:
        - Book
      summary: Get all books recommended by AI
      operationId: getRecommendedBooks
      responses:
        200:
          description: All recommended books for the connected user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  '/books':
    get:
      tags:
        - Book
      summary: Get all books
      parameters:
        - name: author
          in: query
          required: false
          schema:
            type: string
        - name: title
          in: query
          required: false
          schema:
            type: string
        - name: category
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
      operationId: getBooks
      responses:
        200:
          description: All books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Crupdate book
      tags:
        - Book
      security: [ ]
      operationId: crupdateBook
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateBook"
      responses:
        200:
          description: Book created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

  '/books/{id}':
    get:
      tags:
        - Book
      summary: Get book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getBookById
      responses:
        200:
          description: All books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  '/books/{book_id}/reaction':
    put:
      tags:
        - Reaction
      summary: set or unset a reaction on a book
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      operationId: crupdateReactionToABook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrupdateReaction"
      responses:
        200:
          description: Reaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookReaction'
  '/categories/reactions':
    put:
      tags:
        - Reaction
      summary: set or unset reactions categories
      operationId: crupdateReactionsToCategories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CategoryCrupdateReaction"
      responses:
        200:
          description: Reaction created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryReaction'
  /users:
    get:
      tags:
        - Users
      summary: get all users
      operationId: getAllUsers
      responses:
        200:
          description: the users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
    post:
      security:
        [ ]
      tags:
        - Users
      summary: CreateUser
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        200:
          description: the created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /users/{userId}:
    get:
      tags:
        - Users
      summary: getUserById
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
  /users/{userId}/profile:
    put:
      tags:
        - Users
      summary: update user profile
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        200:
          description: the created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
        404:
          $ref: "#/components/responses/404"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  schemas:
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    Whoami:
      properties:
        user:
          $ref: '#/components/schemas/User'
    UserProfile:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
    User:
      type: object
      properties:
        id:
          type: string
        profile:
          $ref: "#/components/schemas/UserProfile"
        status:
          $ref: "#/components/schemas/UserStatus"
      allOf:
        - $ref: "#/components/schemas/CreateUser"
    UserStatus:
      type: string
      enum:
        - ADMIN
        - CLIENT
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/Reacted"
      properties:
        id:
          type: string
        title:
          type: string
        author:
          type: string
        category:
          type: string
        file_link:
          type: string
        file_name:
          type: string
    Reacted:
      type: object
      properties:
        reactionStatistics:
          $ref: "#/components/schemas/ReactionStatistics"
    ReactionStatistics:
      type: object
      properties:
        like_numbers:
          type: integer
        dislike_numbers:
          type: integer
        byCurrentUser:
          $ref: "#/components/schemas/ReactionStatus"
    CreateUser:
      type: object
      properties:
        firebaseId:
          type: string
    CreateBook:
      type: object
      properties:
        title:
          type: string
          description: The title of the book
        author:
          type: string
          description: The author of the book
        category:
          type: string
          description: The category of the book
        book:
          type: string
          format: binary
          description: The book as pdf format
    Category:
      type: object
      allOf:
        - $ref: "#/components/schemas/Reacted"
      properties:
        id:
          type: string
        name:
          type: string
    ReactionStatus:
      type: string
      enum:
        - LIKE
        - DISLIKE
        - UNSET
    CrupdateReaction:
      type: object
      properties:
        reactor_id:
          type: string
        reaction_status:
            $ref: '#/components/schemas/ReactionStatus'
    CategoryCrupdateReaction:
      allOf:
        - $ref: "#/components/schemas/CrupdateReaction"
      properties:
        categoryId:
          type: string
    BookReaction:
      allOf:
        - $ref: '#/components/schemas/CrupdateReaction'
      type: object
      properties:
        id:
          type: string
        book_title:
          type: string
        creation_datetime:
          type: string
          format: date-time
        reactor_name:
          type: string
    CategoryReaction:
      allOf:
        - $ref: '#/components/schemas/CrupdateReaction'
      type: object
      properties:
        id:
          type: string
        category:
          type: string
        creation_datetime:
          type: string
          format: date-time
        reactor_name:
          type: string
    AiResponse:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        synopsis:
          type: string
        category:
          type: string
        reason:
          type: string
