import org.apache.tools.ant.taskdefs.condition.Os
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'

    id 'org.openapi.generator' version '5.2.0'

    id 'jacoco'
}


java {
    group = 'api.prog5.bookwel'
    targetCompatibility = '17'
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

task generateTsClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "typescript-axios"
    inputSpec = "$rootDir/doc/api.yml".toString()
    outputDir = "$buildDir/gen-ts".toString()
    typeMappings = [
            Date    : "Date",
            DateTime: "Date",
    ]
    additionalProperties = [
            enumPropertyNaming: "original",
            npmName           : "@onitsiky/bookwel-typescript-client",
            npmVersion        : project.properties["args"] ?: "latest"
    ]
}

task generateJavaClient(type: GenerateTask) {
    generatorName = "java"
    inputSpec = "$rootDir/doc/api.yml".toString()
    outputDir = "$buildDir/gen".toString()
    apiPackage = "api.prog5.bookwel.endpoint.rest.api"
    invokerPackage = "api.prog5.bookwel.endpoint.rest.client"
    modelPackage = "api.prog5.bookwel.endpoint.rest.model"

    configOptions = [
            serializationLibrary: "jackson",
            dateLibrary: "custom"
    ]
    typeMappings = [
            // What date-time type to use when? https://i.stack.imgur.com/QPhGW.png
            Date: "java.time.LocalDate",
            DateTime: "java.time.Instant",
    ]
    library = "native"

    groupId = 'api.prog5'
    id = 'bookwel-gen'
    skipValidateSpec = false
    logToStderr = true
    generateAliasAsModel = false
    enablePostProcessFile = false
}

task publishJavaClientToMavenLocal(type: Exec, dependsOn: generateJavaClient) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)){
        commandLine './.shell/publish_gen_to_maven_local.bat'
    } else {
        commandLine './.shell/publish_gen_to_maven_local.sh'
    }
}
tasks.compileJava.dependsOn publishJavaClientToMavenLocal

test {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    useJUnitPlatform()
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = "LINE"
                minimum = 0.6
            }
        }
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    doLast {
        def coverageReportFile = file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")

        if (coverageReportFile.exists()) {
            def xmlParser = new XmlParser()
            xmlParser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
            xmlParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)

            def xml = xmlParser.parse(coverageReportFile)

            def totalLines = xml.'counter'.find { it.@type == 'LINE' }.@missed.toInteger() + xml.'counter'.find { it.@type == 'LINE' }.@covered.toInteger()
            def coveredLines = xml.'counter'.find { it.@type == 'LINE' }.@covered.toInteger()
            def coverageRate = coveredLines / totalLines.toDouble() * 100

            println "Total Line Coverage Rate: ${coverageRate.round(2)}%"
        } else {
            println "No JaCoCo coverage report found. Make sure you run 'gradle test jacocoTestReport' first."
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'io.swagger:swagger-annotations:1.6.12'

    implementation 'org.flywaydb:flyway-core'

    implementation 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

tasks.named('test') {
    useJUnitPlatform()
}
